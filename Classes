class Node:
    def __init__(self, value):
        self.data = value
        self.next = None
        self.prev = None


class DoubleLinkedList:
    def __init__(self):
        self.head = None # no need for tail as always the next pointer of last object will remain as none

    def list_add(self, value):
        node = Node(value)   # make new node
        # self.head is either pointing to None or the first object, make the next pointer of the new node point to the same
        node.next = self.head
        # if head is not null, than there is other items in the list
        if self.head is not None:
            # make the prev pointer of the node that head is pointing to point to the new node
            self.head.prev = node
        # make the head point to the new node
        self.head = node
        # make prev pointer of new node, point to head
        node.prev = self.head

    def list_search(self, value):
        # start from the head
        p = self.head
        # do it as long as there is no pointer and value not found
        while p is not None and p.data is not value:
            # make p reference to next node
            p = p.next

        if p.data == value:
            return p

        return None

    def list_delete(self, value):
        # find the node in the linked list
        p = self.list_search(value)
        # if what back pointer points to is not head
        if p.prev is not None:
            # make the next pointer of the node behind, point to the back of the node ahead
            p.prev.next = p.next
        else:
            # if the back node is the head, make it point to the node after
            self.head = p.next
            # if there is a node after
        if p.next is not None:
            p.next.prev = p.prev  # make the the back pointer of the node ahead point to the front pointer of the node behind

    def __iter__(self):
        node = self.head
        while node:
            yield node
            node = node.next

    def get_top(self):
        return self.head
